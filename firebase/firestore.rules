rules_version = '2';
service cloud.firestore {
  // Role helpers read from users/{uid}
  function isSignedIn() {
    return request.auth != null;
  }

  function userDoc(uid) {
    return get(/databases/$(database)/documents/users/$(uid));
  }

  function userRole() {
    return isSignedIn() ? userDoc(request.auth.uid).data.role : null;
  }

  function userSchoolId() {
    return isSignedIn() ? userDoc(request.auth.uid).data.schoolId : null;
  }

  function userClassId() {
    return isSignedIn() ? userDoc(request.auth.uid).data.classId : null;
  }

  function isAdmin() { return userRole() == "admin"; }
  function isTeacher() { return userRole() == "teacher"; }
  function isParent() { return userRole() == "parent"; }
  function isStudent() { return userRole() == "student"; }

  // Check resource or document has the same schoolId as the user
  function sameSchool(resourceSchoolId) {
    return resourceSchoolId == userSchoolId();
  }

  // Convenience check for a document field named schoolId
  function docInSameSchool(path) {
    return get(path).data.schoolId == userSchoolId();
  }

  // Check if teacher can access student (same class)
  function teacherCanAccessStudent(studentData) {
    return isTeacher() && sameSchool(studentData.schoolId) && userClassId() == studentData.classId;
  }

  match /databases/{database}/documents {

    // Users: let users read/write their own profile; admins of the same school can read/write any user in that school
    match /users/{uid} {
      allow read: if isSignedIn() && (request.auth.uid == uid || (isAdmin() && sameSchool(resource.data.schoolId)));
      allow write: if isSignedIn() && (
        // User can update their own basic fields (not role/schoolId)
        (request.auth.uid == uid
          && request.resource.data.diff(resource.data).changedKeys().hasOnly(['name'])
        )
        ||
        // Admins in the same school can manage role and other fields
        (isAdmin() && sameSchool(request.resource.data.schoolId))
      );
    }

    // Schools: read for members; write only by admins (scoped to their school doc)
    match /schools/{schoolId} {
      allow read: if isSignedIn() && sameSchool(schoolId);
      allow write: if isSignedIn() && isAdmin() && sameSchool(schoolId);
    }

    // Students collection
    match /students/{studentId} {
      // Read:
      // - Admins/Teachers of the same school
      // - Parents if their uid is listed in guardians[]
      // - The student if their user profile links to this studentId and same school
      allow read: if isSignedIn() && (
        (isAdmin() && sameSchool(resource.data.schoolId)) ||
        (isTeacher() && sameSchool(resource.data.schoolId)) ||
        (isParent() && resource.data.guardians != null && request.auth.uid in resource.data.guardians && sameSchool(resource.data.schoolId)) ||
        (isStudent() && userDoc(request.auth.uid).data.studentId == studentId && sameSchool(resource.data.schoolId))
      );

      // Write:
      // - Admins of same school can write
      // - Teachers of same school can update academic and discipline fields only
      allow write: if isSignedIn() && (
        (isAdmin() && sameSchool(request.resource.data.schoolId))
        ||
        (isTeacher() && sameSchool(request.resource.data.schoolId)
          && request.resource.data.diff(resource.data).changedKeys().hasOnly([
            'academicPerformance',
            'disciplinePoints',
            'merits',
            'disciplineHistory',
            'updatedAt',
            'feeBalance'
          ])
        )
      );
    }

    // Classes
    match /classes/{classId} {
      allow read: if isSignedIn() && docInSameSchool(/databases/$(database)/documents/classes/$(classId));
      allow write: if isSignedIn() && isAdmin() && sameSchool(request.resource.data.schoolId);
    }

    // Merits
    match /merits/{id} {
      allow read: if isSignedIn() && docInSameSchool(/databases/$(database)/documents/merits/$(id));
      allow write: if isSignedIn() && (
        (isAdmin() && sameSchool(request.resource.data.schoolId)) ||
        (isTeacher() && sameSchool(request.resource.data.schoolId))
      );
    }

    // Discipline reports (legacy)
    match /disciplineReports/{id} {
      allow read: if isSignedIn() && docInSameSchool(/databases/$(database)/documents/disciplineReports/$(id));
      allow write: if isSignedIn() && (
        (isAdmin() && sameSchool(request.resource.data.schoolId)) ||
        (isTeacher() && sameSchool(request.resource.data.schoolId))
      );
    }

    // NEW: Offences - Admin only CRUD
    match /offences/{offenceId} {
      allow read: if isSignedIn() && sameSchool(resource.data.schoolId);
      allow write: if isSignedIn() && isAdmin() && sameSchool(request.resource.data.schoolId);
    }

    // NEW: Discipline Records
    match /disciplineRecords/{recordId} {
      // Read: Admins, Teachers (same school), Parents (if their child), Students (if their own record)
      allow read: if isSignedIn() && (
        (isAdmin() && sameSchool(resource.data.schoolId)) ||
        (isTeacher() && sameSchool(resource.data.schoolId)) ||
        (isParent() && resource.data.studentId != null && 
         get(/databases/$(database)/documents/students/$(resource.data.studentId)).data.guardians != null &&
         request.auth.uid in get(/databases/$(database)/documents/students/$(resource.data.studentId)).data.guardians &&
         sameSchool(resource.data.schoolId)) ||
        (isStudent() && userDoc(request.auth.uid).data.studentId == resource.data.studentId && sameSchool(resource.data.schoolId))
      );

      // Write: Only teachers can create records for students in their class
      allow create: if isSignedIn() && isTeacher() && 
        sameSchool(request.resource.data.schoolId) &&
        request.resource.data.teacherId == request.auth.uid &&
        get(/databases/$(database)/documents/students/$(request.resource.data.studentId)).data.classId == userClassId();
      
      // No updates or deletes allowed
      allow update, delete: if false;
    }

    // Grades (optional separate collection)
    match /grades/{id} {
      allow read: if isSignedIn() && docInSameSchool(/databases/$(database)/documents/grades/$(id));
      allow write: if isSignedIn() && (
        (isAdmin() && sameSchool(request.resource.data.schoolId)) ||
        (isTeacher() && sameSchool(request.resource.data.schoolId))
      );
    }

    // Default deny
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
